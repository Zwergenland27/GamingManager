// <auto-generated />
using System;
using GamingManager.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GamingManager.Infrastructure.Migrations.ReadContext
{
    [DbContext(typeof(GamingManagerReadContext))]
    partial class GamingManagerReadContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.AccountReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.BanReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BannedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.GameReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.GameServerReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid?>("HostedOnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Maintenance")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ShutdownAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ShutdownDelay")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("Unstartable")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("HostedOnId");

                    b.ToTable("GameServers");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.ParticipantReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Online")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("PlayTime")
                        .HasColumnType("interval");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Since")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.ProjectReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ServerId")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.ServerReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hostname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastHeartbeatAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mac")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Maintenance")
                        .HasColumnType("boolean");

                    b.Property<bool>("PossiblyUnstartable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ShutdownAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ShutdownDelay")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.SessionReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Irregular")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.TeamMemberReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TeamMemberSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.UserReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.AccountReadModel", b =>
                {
                    b.HasOne("GamingManager.Infrastructure.ReadModels.GameReadModel", "Game")
                        .WithMany("Accounts")
                        .HasForeignKey("GameId");

                    b.HasOne("GamingManager.Infrastructure.ReadModels.UserReadModel", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.BanReadModel", b =>
                {
                    b.HasOne("GamingManager.Infrastructure.ReadModels.ParticipantReadModel", "Participant")
                        .WithMany("Bans")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.GameServerReadModel", b =>
                {
                    b.HasOne("GamingManager.Infrastructure.ReadModels.ServerReadModel", "HostedOn")
                        .WithMany("Hosts")
                        .HasForeignKey("HostedOnId");

                    b.Navigation("HostedOn");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.ParticipantReadModel", b =>
                {
                    b.HasOne("GamingManager.Infrastructure.ReadModels.AccountReadModel", "Account")
                        .WithMany("Participants")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingManager.Infrastructure.ReadModels.ProjectReadModel", "Project")
                        .WithMany("Participants")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.ProjectReadModel", b =>
                {
                    b.HasOne("GamingManager.Infrastructure.ReadModels.GameReadModel", "Game")
                        .WithMany("Projects")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingManager.Infrastructure.ReadModels.GameServerReadModel", "Server")
                        .WithOne("Project")
                        .HasForeignKey("GamingManager.Infrastructure.ReadModels.ProjectReadModel", "ServerId");

                    b.Navigation("Game");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.SessionReadModel", b =>
                {
                    b.HasOne("GamingManager.Infrastructure.ReadModels.ParticipantReadModel", "Participant")
                        .WithMany("Sessions")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.TeamMemberReadModel", b =>
                {
                    b.HasOne("GamingManager.Infrastructure.ReadModels.ProjectReadModel", "Project")
                        .WithMany("TeamMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingManager.Infrastructure.ReadModels.UserReadModel", "User")
                        .WithMany("MemberOfTeam")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.AccountReadModel", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.GameReadModel", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.GameServerReadModel", b =>
                {
                    b.Navigation("Project")
                        .IsRequired();
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.ParticipantReadModel", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.ProjectReadModel", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.ServerReadModel", b =>
                {
                    b.Navigation("Hosts");
                });

            modelBuilder.Entity("GamingManager.Infrastructure.ReadModels.UserReadModel", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("MemberOfTeam");
                });
#pragma warning restore 612, 618
        }
    }
}
